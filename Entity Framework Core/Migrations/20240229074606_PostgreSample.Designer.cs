// <auto-generated />
using Entity_Framework_Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entity_Framework_Core.Migrations
{
    [DbContext(typeof(EFCoreCodeFirst))]
    [Migration("20240229074606_PostgreSample")]
    partial class PostgreSample
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity_Framework_Core.Objects.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.ToTable("product", "Store");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("user", "Store");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.UserOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_order", "Store");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.UserOrderProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("UserOrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_order_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UserOrderId");

                    b.ToTable("user_order_product", "Store");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.UserOrder", b =>
                {
                    b.HasOne("Entity_Framework_Core.Objects.User", "User")
                        .WithMany("UserOrder")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.UserOrderProduct", b =>
                {
                    b.HasOne("Entity_Framework_Core.Objects.Product", "Product")
                        .WithOne("UserOrderProduct")
                        .HasForeignKey("Entity_Framework_Core.Objects.UserOrderProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Framework_Core.Objects.UserOrder", "UserOrder")
                        .WithMany("UserOrderProduct")
                        .HasForeignKey("UserOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UserOrder");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.Product", b =>
                {
                    b.Navigation("UserOrderProduct");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.User", b =>
                {
                    b.Navigation("UserOrder");
                });

            modelBuilder.Entity("Entity_Framework_Core.Objects.UserOrder", b =>
                {
                    b.Navigation("UserOrderProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
